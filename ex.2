class matrix:
    def __init__(self, n, m):
        self.n = n  # lengh
        self.m = m
        self.mat = []

    def read(self, file):
        self.mat = list(map(float, file.read().split()))
        file.close()

    def printf(self):
        for i in range(self.m):
            for j in range(self.n):
                print(self.mat[(i * self.n) + j], end=' ')
            print("\n")

    def __add__(self, obj):
        if (obj.n != self.n or obj.m != self.n):
            print("wrong matrix dimension")
            pass
        else:
            w = matrix(self.n, self.m)
            for i in range(self.m * self.n):
                w.mat.append(self.mat[i] + obj.mat[i])
            return (w)

    def transpose(self):
        w = matrix(self.m, self.n)
        for i in range(self.n):
            for j in range(self.m):
                w.mat.append(self.mat[(j * self.n) + i])
        return (w)

    def trace(self):
        p = 0
        for i in range(self.m):
            for j in range(self.n):
                if (i == j):
                    p = self.mat[(i * self.n) + j] + p
        return (p)

    def __sub__(self, obj):
        if (obj.n != self.n or obj.m != self.n):
            print("wrong matrix dimension")
            pass
        else:
            w = matrix(self.n, self.m)
            for i in range(self.m * self.n):
                w.mat.append(self.mat[i] - obj.mat[i])
            return (w)

    def __mul__(self, obj):
        if (type(obj) == matrix):
            if (self.n == obj.m):
                w = matrix(obj.n, self.m)
                for i in range(self.m):
                    for j in range(obj.n):
                        w.mat.append(0)
                        for k in range(self.n):
                            w.mat[(i * obj.n) + j] = self.mat[(i * self.n) + k] * obj.mat[(k * obj.n) + j] + w.mat[(i * obj.n) + j]
            else:
                print("wrong matrix dimension")
                w = matrix(0, 0)
        else:
            w = matrix(self.n, self.m)
            for i in range((self.m * self.n)):
                w.mat.append(self.mat[i] * obj)
        return (w)

        def low_tr(self):
        if (self.m==self.n):
            w=matrix(self.m,self.n)
            for i in range(self.m):
                for j in range(self.m):
                    w.mat.append(0)
            for i in range(self.m):
                w.mat[i]=self.mat[i]
            for i in range(self.m):
                for j in range(self.m-i-1):
                    for k in range(i+1):
                        w.mat[(i+1)*self.m+(self.m-1-j)]=self.mat[(i+1)*self.m+(self.m-1-j)]-self.mat[i*self.m+(self.m-1-j)]*((i+1)*self.mat[(i+1)*self.m+k]/w.mat[k*self.m+k])
            return(w)
        else:
            print("wrong matrix dimension")
            pass
    def top_tr(self):
        if (self.m==self.n):
            w=self.low_tr()
            w=w.transpose()
            return(w)
        else:
            print("wrong matrix dimension")
            pass
    def det(self):
        w=self.low_tr()
        q=1
        for i in range(self.n):
            q=w.mat[i*self.n+i]*q
        return(q)

n = int(input())
m = int(input())
k = matrix(n, m)
r = open("file.txt", "r")
k.read(r)
w=k.det()
try:
    w.printf()
except AttributeError:
    if (type(w) == float):
        print(w)
    else:
        print("no")
